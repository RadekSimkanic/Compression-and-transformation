# inspiration: http://rosettacode.org/wiki/LZW_compression#Python

def compress(uncompressed, dict_size = 256):
    # Build the dictionary.
    #dictionary = dict((chr(i), i) for i in xrange(dict_size))
    dictionary = {chr(i): i for i in range(dict_size)}

    w = ""
    result = []
    for c in uncompressed:
        wc = w + c
        if wc in dictionary:
            w = wc
        else:
            result.append(dictionary[w])
            # Add wc to the dictionary.
            dictionary[wc] = dict_size
            dict_size += 1
            w = c

    # Output the code for w.
    if w:
        result.append(dictionary[w])
    return result

def decompress(compressed, dict_size = 256):
    # Build the dictionary.
    dictionary = map(lambda x: chr(x), xrange(dict_size))

    result = []
    w = compressed.pop(0)
    w = chr(w)
    result.append(w)

    for k in compressed:
        if k < dict_size:
            entry = dictionary[k]
        elif k == dict_size:
            entry = w + w[0]
        else:
            raise ValueError('Bad compressed k: %s' % k)
        result.append(entry)

        dictionary.append(w + entry[0])
        dict_size += 1

        w = entry
    # expand items with more chars in result
    clear_result = []
    for item in result:
        if len(item) == 1:
            clear_result.append(item)
            continue
        for char in item:
            clear_result.append(char)

    return clear_result

"""
if __name__ == "__main__":
    # How to use:
    data = [1, 1, 1, 4, 3, 2, 8, 3, 4, 2, 3, 4, 5, 10, 0, 2, 1, 1, 0, 0, 4, 4, 4, 4, 0, 3, 2, 3, 2, 5, 1, 1, 4, 1, 0, 1, 0, 2, 0, 1, 4, 3, 4, 3, 1, 0, 1, 0, 1, 4, 2, 2, 7, 7, 3, 3, 4, 2, 2, 8, 6, 2, 3, 2, 7, 6, 4, 6, 2, 6, 7, 3, 1, 2, 3, 2, 5, 4, 8, 6, 2, 1, 1, 0, 0, 2, 4, 3, 2, 9, 6, 2, 4, 0, 1, 3, 2, 2, 0, 6, 1, 0, 3, 2, 1, 1, 2, 3, 0, 6, 2, 4, 0, 0, 3, 1, 0, 8, 4, 2, 2, 4, 7, 1, 0, 3, 8, 5, 1, 0, 4, 5, 2, 0, 2, 0, 2, 4, 1, 2, 0, 1, 0, 8, 0, 4, 1, 0, 3, 2, 4, 4, 1, 1, 0, 3, 3, 2, 2, 3, 4, 1, 0, 2, 2, 8, 8, 4, 6, 0, 2, 0, 2, 4, 5, 3, 2, 0, 1, 1, 1, 3, 8, 3, 8, 6, 3, 7, 2, 14, 5, 5, 8, 8, 2, 2, 3, 0, 9, 9, 3, 10, 10, 8, 8, 0, 1, 1, 5, 6, 21, 21, 4, 23, 7, 6, 5, 0, 9, 1, 0, 5, 1, 2, 11, 3, 2, 5, 1, 4, 11, 23, 16, 11, 27, 6, 9, 4, 4, 5, 4, 1, 2, 12, 2, 0, 5, 0, 9, 3, 6, 3, 12, 7, 7, 18, 23, 27, 26, 15, 1, 3, 1, 2, 4, 4, 2, 0, 0, 0, 4, 1, 1, 0, 0, 0, 2, 0, 3, 6, 3, 8, 7, 9, 21, 2, 5, 0, 0, 6, 0, 7, 4, 3, 3, 7, 1, 0, 27, 19, 3, 51, 22, 9, 9, 9, 0, 6, 4, 2, 5, 10, 5, 8, 19, 2, 15, 13, 2, 2, 4, 3, 12, 19, 9, 23, 19, 3, 5, 2, 14, 4, 6, 5, 2, 0, 13, 2, 10, 11, 5, 2, 6, 12, 11, 2, 4, 5, 3, 2, 1, 2, 3, 1, 2, 8, 9, 4, 2, 2, 1, 3, 3, 2, 1, 1, 0, 1, 6, 2, 0, 6, 0, 2, 2, 4, 1, 4, 3, 0, 4, 0, 3, 0, 3, 2, 1, 1, 1, 1, 4, 4, 5, 2, 2, 1, 2, 1, 0, 6, 5, 1, 3, 0, 1, 2, 1, 2, 4, 5, 4, 3, 2, 1, 1, 3, 1, 2, 1, 2, 2, 2, 0, 4, 4, 3, 2, 4, 8, 2, 3, 1, 5, 4, 1, 1, 2, 4, 1, 2, 0, 5, 1, 1, 1, 1, 0, 3, 14, 5, 3, 8, 15, 11, 6, 9, 2, 5, 5, 2, 2, 1, 2, 3, 1, 2, 3, 2, 2, 1, 1, 3, 8, 2, 3, 4, 3, 6, 2, 2, 1, 2, 0, 6, 2, 4, 2, 4, 1, 1, 2, 1, 2, 2, 3, 4, 1, 1, 3, 6, 0, 4, 2, 0, 2, 2, 0, 1, 3, 0, 2, 0, 1, 4, 6, 0, 4, 6, 4, 3, 0, 4, 5, 4, 10, 1, 1, 3, 0, 2, 0, 5, 4, 5, 3, 0, 0, 1, 2, 1, 1, 1, 0, 1, 2, 1, 2, 2, 1, 2, 2, 5, 3, 3, 3, 1, 1, 3, 2, 5, 1, 1, 0, 5, 2, 1, 2, 0, 2, 1, 6, 5, 5, 2, 1, 5, 5, 8, 3, 6, 1, 3, 0, 2, 3, 0, 2, 6, 2, 6, 2, 4, 1, 3, 1, 1, 1, 1, 1, 2, 2, 0, 0, 1, 0, 1, 1, 2, 1, 1, 2, 2, 3, 4, 2, 2, 0, 2, 0, 3, 1, 2, 1, 2, 1, 5, 5, 0, 3, 10, 0, 2, 1, 7, 2, 3, 6, 3, 2, 0, 0, 4, 2, 2, 1, 3, 1, 2, 11, 1, 2, 2, 0, 0, 3, 1, 1, 1, 0, 2, 2, 6, 3, 2, 2, 1, 2, 2, 1, 6, 2, 0, 5, 2, 3, 0, 8, 11, 0, 2, 2, 2, 2, 2, 1, 1, 0, 2, 2, 0, 0, 1, 3, 4, 8, 6, 8, 2, 5, 4, 11, 8, 2, 7, 5, 0, 1, 1, 3, 6, 8, 1, 2, 14, 8, 9, 1, 1, 1, 2, 3, 15, 18, 1, 20, 9, 3, 2, 2, 5, 3, 0, 5, 3, 0, 2, 3, 1, 5, 3, 2, 8, 23, 24, 2, 26, 20, 5, 2, 2, 0, 0, 4, 3, 10, 0, 4, 1, 6, 8, 8, 2, 5, 11, 2, 10, 0, 14, 25, 30, 22, 13, 1, 2, 1, 2, 0, 1, 0, 0, 2, 9, 6, 3, 1, 1, 0, 1, 16, 0, 6, 1, 4, 3, 15, 4, 13, 19, 7, 3, 3, 9, 4, 1, 5, 8, 3, 6, 15, 10, 10, 12, 25, 4, 33, 33, 1, 15, 9, 3, 3, 16, 9, 10, 3, 10, 20, 5, 14, 12, 1, 11, 12, 7, 4, 2, 8, 10, 26, 18, 6, 7, 1, 19, 9, 10, 9, 6, 4, 2, 0, 8, 6, 2, 9, 10, 7, 4, 3, 6, 1, 2, 3, 5, 1, 4, 5, 1, 7, 9, 5, 3, 3, 0, 2, 4, 8, 5, 2, 3, 4, 3, 4, 3, 3, 1, 2, 1, 2, 1, 2, 3, 1, 0, 4, 0, 2, 3, 3, 1, 1, 1, 3, 0, 1, 0, 3, 1, 3, 0, 0, 2, 7, 3, 2, 2, 1, 2, 2, 1, 1, 4, 4, 1, 2, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 3, 3, 0, 4, 4, 6, 2, 1, 1, 8, 2, 1, 1, 2, 2, 3, 2, 0, 5, 1, 3, 1, 3, 0, 10, 10, 7, 3, 5, 18, 9, 6, 6, 0, 5, 2, 2, 1, 3, 1, 2, 0, 3, 1, 3, 1, 2, 3, 0, 8, 6, 1, 1, 7, 5, 3, 4, 1, 2, 3, 2, 1, 5, 3, 3, 3, 1, 1, 0, 3, 0, 0, 0, 3, 2, 2, 4, 2, 1, 2, 0, 2, 3, 0, 2, 1, 3, 1, 1, 2, 7, 2, 3, 6, 3, 1, 3, 1, 3, 5, 6, 9, 2, 3, 2, 2, 1, 1, 6, 0, 4, 3, 1, 2, 1, 2, 1, 3, 3, 3, 3, 2, 2, 1, 1, 2, 1, 1, 1, 0, 2, 1, 5, 4, 0, 1, 4, 7, 1, 2, 2, 6, 3, 0, 2, 0, 2, 1, 7, 8, 1, 2, 5, 6, 7, 0, 3, 5, 1, 0, 1, 6, 0, 0, 4, 1, 2, 2, 5, 1, 2, 0, 0, 1, 1, 0, 1, 2, 1, 1, 1, 1, 5, 0, 2, 1, 5, 5, 2, 0, 0, 1, 6, 3, 3, 2, 9, 6, 0, 0, 1, 3, 3, 2, 3, 0, 6, 1, 2, 2, 1, 0, 0, 1, 1, 2, 3, 1, 1, 4, 1, 3, 4, 1, 1, 9, 4, 2, 0, 1, 1, 2, 1, 1, 4, 0, 6, 3, 0, 5, 3, 3, 4, 1, 2, 2, 3, 1, 1, 2, 1, 3, 2, 6, 8, 1, 3, 3, 1, 2, 0, 0, 1, 2, 0, 0, 1, 1, 6, 2, 3, 7, 9, 5, 8, 9, 1, 7, 8, 6, 3, 6, 4, 3, 6, 4, 2, 6, 5, 4, 5, 8, 3, 8, 2, 0, 3, 1, 8, 22, 11, 12, 14, 4, 0, 1, 4, 1, 2, 4, 1, 2, 1, 4, 0, 3, 1, 2, 9, 20, 21, 6, 9, 21, 14, 3, 0, 2, 2, 3, 5, 0, 3, 1, 3, 1, 4, 11, 8, 2, 12, 12, 2, 0, 6, 16, 34, 30, 21, 6, 3, 1, 2, 0, 2, 4, 5, 11, 13, 14, 1, 5, 3, 12, 2]
    chr_data = map(lambda x: chr(x), data)

    comp = compress(chr_data)

    print "ORIGINAL"
    print "============================="
    print chr_data
    print "============================="

    print "Compressed"
    print "============================="
    print comp
    print "============================="

    decomp = decompress(comp)
    print "Decompressed"
    print "============================="
    print decomp
    print "============================="


    print "original size: %i    compress size: %i   decompress size: %i"%(len(data), len(comp), len(decomp))
"""